apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: open-webui
resources:
  - open-webui-namespace.yaml
  - open-webui-secrets-externalsecret.yml
helmCharts:
- name: open-webui
  namespace: open-webui
  version: 8.12.2
  releaseName: open-webui
  repo: https://helm.openwebui.com/
  valuesInline:
    # Default values for ollama-helm.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    # -- Number of replicas
    nameOverride: ""
    namespaceOverride: ""
    ollama:
      enabled: false
    pipelines:
      # -- Automatically install Pipelines chart to extend Open WebUI functionality using Pipelines: https://github.com/open-webui/pipelines
      enabled: false
      # -- This section can be used to pass required environment variables to your pipelines (e.g. Langfuse hostname)
      extraEnvVars: []
    tika:
      # -- Automatically install Apache Tika to extend Open WebUI
      enabled: false
    # -- A list of Ollama API endpoints. These can be added in lieu of automatically installing the Ollama Helm chart, or in addition to it.
    ollamaUrls:
      - http://ollama.ollama.svc.cluster.local:11434
    # -- Disables taking Ollama Urls from `ollamaUrls`  list
    ollamaUrlsFromExtraEnv: false
    clusterDomain: cluster.local
    annotations: {}
    podAnnotations: {}
    podLabels: {}
    replicaCount: 1
    # -- Strategy for updating the workload manager: deployment or statefulset
    strategy: {}
    # -- Open WebUI image tags can be found here: https://github.com/open-webui/open-webui
    image:
      repository: ghcr.io/open-webui/open-webui
      tag: ""
      pullPolicy: "IfNotPresent"
    serviceAccount:
      enable: true
      name: ""
      annotations: {}
      automountServiceAccountToken: false
    # -- Configure imagePullSecrets to use private registry
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry>
    imagePullSecrets: []
    # imagePullSecrets:
    # - name: myRegistryKeySecretName
    # -- Probe for liveness of the Open WebUI container
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
    livenessProbe: {}
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: http
    #   failureThreshold: 1
    #   periodSeconds: 10
    # -- Probe for readiness of the Open WebUI container
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
    readinessProbe: {}
    # readinessProbe:
    #   httpGet:
    #     path: /health/db
    #     port: http
    #   failureThreshold: 1
    #   periodSeconds: 10
    # -- Probe for startup of the Open WebUI container
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
    startupProbe: {}
    # startupProbe:
    #   httpGet:
    #     path: /health
    #     port: http
    #   initialDelaySeconds: 30
    #   periodSeconds: 5
    #   failureThreshold: 20
    resources: {}
    copyAppData:
      resources: {}
    managedCertificate:
      enabled: false
      name: "mydomain-chat-cert" # You can override this name if needed
      domains:
        - chat.example.com # update to your real domain
    ingress:
      enabled: true
      class: "openshift-default"
      # -- Use appropriate annotations for your Ingress controller, e.g., for NGINX:
      annotations:
        route.openshift.io/termination: edge
      #   # Example for GKE Ingress
      #   kubernetes.io/ingress.class: "gce"
      #   kubernetes.io/ingress.global-static-ip-name: "open-webui-external-ip"   #  you need to create this address in GCP console
      #   # Force HTTP to redirect to HTTPS
      #   nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      #   nginx.ingress.kubernetes.io/ssl-redirect: "true"
      #   nginx.ingress.kubernetes.io/permanent-redirect: "https://chat.example.com"
      #   networking.gke.io/managed-certificates: "mydomain-chat-cert"
      #   # nginx.ingress.kubernetes.io/rewrite-target: /
      host: "open-webui.apps.sno.igou.systems" # update to your real domain
      additionalHosts: []
      tls: false
      existingSecret: ""
      # -- Additional custom labels to add to the Ingress metadata
      # Useful for tagging, selecting, or applying policies to the Ingress via labels.
      extraLabels: {}
      # extraLabels:
      #   app.kubernetes.io/environment: "staging"
    persistence:
      enabled: true
      size: 20Gi
      # -- Use existingClaim if you want to re-use an existing Open WebUI PVC instead of creating a new one
      existingClaim: ""
      # -- Subdirectory of Open WebUI PVC to mount. Useful if root directory is not empty.
      subPath: ""
      # -- If using multiple replicas, you must update accessModes to ReadWriteMany
      accessModes:
        - ReadWriteOnce
      storageClass: "lvms-vg1-worker"
      selector: {}
      annotations: {}
      # -- Sets the storage provider, availables values are `local`, `s3`, `gcs` or `azure`
      provider: local
    nodeSelector: {}
    # -- Tolerations for pod assignment
    tolerations: []
    # -- Affinity for pod assignment
    affinity: {}
    # -- Topology Spread Constraints for pod assignment
    topologySpreadConstraints: []
    # -- HostAliases to be added to hosts-file of each container
    hostAliases: []
    # -- Service values to expose Open WebUI pods to cluster
    service:
      type: ClusterIP
      annotations: {}
      port: 80
      containerPort: 8080
      nodePort: ""
      labels: {}
      loadBalancerClass: ""
    # -- Enables the use of OpenAI APIs
    enableOpenaiApi: true
    # -- OpenAI base API URL to use. Defaults to the Pipelines service endpoint when Pipelines are enabled, and "https://api.openai.com/v1" if Pipelines are not enabled and this value is blank
    # -- OpenAI base API URLs to use. Overwrites the value in openaiBaseApiUrl if set
    openaiBaseApiUrls:
      - "https://api.openai.com/v1"
    # -- Env vars added to the Open WebUI deployment. Most up-to-date environment variables can be found here: https://docs.openwebui.com/getting-started/env-configuration/
    extraEnvVars:
      # -- Default API key value for Pipelines. Should be updated in a production deployment, or be changed to the required API key if not using Pipelines
      - name: WEBUI_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: open-webui-secrets
            key: webui-secret-key
      - name: OPENAI_API_KEY
        valueFrom:
          secretKeyRef:
            name: open-webui-secrets
            key: openai-api-key
      - name: ENABLE_SIGNUP
        value: "false"
      # - name: OLLAMA_DEBUG
      #   value: "1"
    # -- Env vars added to the Open WebUI deployment, common across environments. Most up-to-date environment variables can be found here: https://docs.openwebui.com/getting-started/env-configuration/ (caution: environment variables defined in both `extraEnvVars` and `commonEnvVars` will result in a conflict. Avoid duplicates)
    commonEnvVars: []
      # - name: RAG_EMBEDDING_ENGINE
      #   value: "openai"
    # -- Env vars added from configmap or secret to the Open WebUI deployment. Most up-to-date environment variables can be found here: https://docs.openwebui.com/getting-started/env-configuration/ (caution: `extraEnvVars` will take precedence over the value from `extraEnvFrom`)
    extraEnvFrom: []
      # - configMapRef:
      #     name: my-config
      # - secretRef:
      #     name: my-secret
    # -- Configure runtime class
    # ref: <https://kubernetes.io/docs/concepts/containers/runtime-class/>
    runtimeClassName: ""
    # -- Configure container volume mounts
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/>
    volumeMounts:
      initContainer: []
      # - name: ""
      #   mountPath: ""
      container: []
      # - name: ""
      #   mountPath: ""
    # -- Additional init containers to add to the deployment/statefulset
    # ref: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>
    extraInitContainers: []
    # - name: custom-init
    #   image: busybox:latest
    #   command: ['sh', '-c', 'echo "Custom init container running"']
    #   volumeMounts:
    #   - name: data
    #     mountPath: /data
    # -- Configure pod volumes
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/>
    volumes: []
    # - name: ""
    #   configMap:
    #     name: ""
    # - name: ""
    #   emptyDir: {}
    # -- Configure pod security context
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container>
    podSecurityContext:
      {}
      # fsGroupChangePolicy: Always
      # sysctls: []
      # supplementalGroups: []
      # fsGroup: 1001
    # -- Configure container security context
    # ref: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-containe>
    containerSecurityContext:
      {}
      # runAsUser: 1001
      # runAsGroup: 1001
      # runAsNonRoot: true
      # privileged: false
      # allowPrivilegeEscalation: false
      # readOnlyRootFilesystem: false
      # capabilities:
      #   drop:
      #     - ALL
      # seccompProfile:
      #   type: "RuntimeDefault"
    sso:
      # -- **Enable SSO authentication globally** must enable to use SSO authentication
      # @section -- SSO Configuration
      enabled: false
      # -- Enable account creation when logging in with OAuth (distinct from regular signup)
      # @section -- SSO Configuration
      enableSignup: false
      # -- Allow logging into accounts that match email from OAuth provider (considered insecure)
      # @section -- SSO Configuration
      mergeAccountsByEmail: false
      # -- Enable OAuth role management through access token roles claim
      # @section -- SSO Configuration
      enableRoleManagement: false
      # -- Enable OAuth group management through access token groups claim
      # @section -- SSO Configuration
      enableGroupManagement: false
      github:
        # -- Enable GitHub OAuth
        # @section -- GitHub OAuth configuration
        enabled: false
        # -- GitHub OAuth client ID
        # @section -- GitHub OAuth configuration
        clientId: ""
        # -- GitHub OAuth client secret (ignored if clientExistingSecret is set)
        # @section -- GitHub OAuth configuration
        clientSecret: ""
        # -- GitHub OAuth client secret from existing secret
        # @section -- GitHub OAuth configuration
        clientExistingSecret: ""
        # -- GitHub OAuth client secret key from existing secret
        # @section -- GitHub OAuth configuration
        clientExistingSecretKey: ""
      roleManagement:
        # -- The claim that contains the roles (can be nested, e.g., user.roles)
        # @section -- Role management configuration
        rolesClaim: "roles"
        # -- Comma-separated list of roles allowed to log in (receive open webui role user)
        # @section -- Role management configuration
        allowedRoles: ""
        # -- Comma-separated list of roles allowed to log in as admin (receive open webui role admin)
        # @section -- Role management configuration
        adminRoles: ""
      groupManagement:
        # -- The claim that contains the groups (can be nested, e.g., user.memberOf)
        # @section -- SSO Configuration
        groupsClaim: "groups"
      trustedHeader:
        # -- Enable trusted header authentication
        # @section -- SSO trusted header authentication
        enabled: false
        # -- Header containing the user's email address
        # @section -- SSO trusted header authentication
        emailHeader: ""
        # -- Header containing the user's name (optional, used for new user creation)
        # @section -- SSO trusted header authentication
        nameHeader: ""
    # -- Extra resources to deploy with Open WebUI
    extraResources:
      []
      # - apiVersion: v1
      #   kind: ConfigMap
      #   metadata:
      #     name: example-configmap
      #   data:
      #     example-key: example-value
    # -- Configure database URL, needed to work with Postgres (example: `postgresql://<user>:<password>@<service>:<port>/<database>`), leave empty to use the default sqlite database
    databaseUrl: ""
    # -- Postgresql configuration (see. https://artifacthub.io/packages/helm/bitnami/postgresql)
    postgresql:
      enabled: false
    # Configure Application logging levels (see. https://docs.openwebui.com/getting-started/advanced-topics/logging#-logging-levels-explained)
    logging:
      # -- Set the global log level ["notset", "debug", "info" (default), "warning", "error", "critical"]
      # @section -- Logging configuration
      level: ""
      # Optional granularity: override log levels per subsystem/component
      # if not set, it will use the global level (see. https://docs.openwebui.com/getting-started/advanced-topics/logging#%EF%B8%8F-appbackend-specific-logging-levels)
      components:
        # -- Set the log level for the Audio processing component
        # @section -- Logging configuration
        audio: ""
        # -- Set the log level for the ComfyUI Integration component
        # @section -- Logging configuration
        comfyui: ""
        # -- Set the log level for the Configuration Management component
        # @section -- Logging configuration
        config: ""
        # -- Set the log level for the Database Operations (Peewee) component
        # @section -- Logging configuration
        db: ""
        # -- Set the log level for the Image Generation component
        # @section -- Logging configuration
        images: ""
        # -- Set the log level for the Main Application Execution component
        # @section -- Logging configuration
        main: ""
        # -- Set the log level for the Model Management component
        # @section -- Logging configuration
        models: ""
        # -- Set the log level for the Ollama Backend Integration component
        # @section -- Logging configuration
        ollama: ""
        # -- Set the log level for the OpenAI API Integration component
        # @section -- Logging configuration
        openai: ""
        # -- Set the log level for the Retrieval-Augmented Generation (RAG) component
        # @section -- Logging configuration
        rag: ""
        # -- Set the log level for the Authentication Webhook component
        # @section -- Logging configuration
        webhook: ""